//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace ImpFAA.MyService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServicesSoap", Namespace="http://hspm.org/")]
    public partial class Services : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getDadosFAAOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEspecbyCodOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllEspecsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProcedsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDescrProcedOperationCompleted;
        
        private System.Threading.SendOrPostCallback gravaProcedEspecOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcedsEspecsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delProcedEspecOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcedsEspecsFAAOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProcedsEspecsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getClinbyEspecOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Services() {
            this.Url = global::ImpFAA.Properties.Settings.Default.ImpFAA_MyService_Services;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getDadosFAACompletedEventHandler getDadosFAACompleted;
        
        /// <remarks/>
        public event getEspecbyCodCompletedEventHandler getEspecbyCodCompleted;
        
        /// <remarks/>
        public event getAllEspecsCompletedEventHandler getAllEspecsCompleted;
        
        /// <remarks/>
        public event getAllProcedsCompletedEventHandler getAllProcedsCompleted;
        
        /// <remarks/>
        public event getDescrProcedCompletedEventHandler getDescrProcedCompleted;
        
        /// <remarks/>
        public event gravaProcedEspecCompletedEventHandler gravaProcedEspecCompleted;
        
        /// <remarks/>
        public event getProcedsEspecsCompletedEventHandler getProcedsEspecsCompleted;
        
        /// <remarks/>
        public event delProcedEspecCompletedEventHandler delProcedEspecCompleted;
        
        /// <remarks/>
        public event getProcedsEspecsFAACompletedEventHandler getProcedsEspecsFAACompleted;
        
        /// <remarks/>
        public event getAllProcedsEspecsCompletedEventHandler getAllProcedsEspecsCompleted;
        
        /// <remarks/>
        public event getClinbyEspecCompletedEventHandler getClinbyEspecCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/getDadosFAA", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DadosFAA getDadosFAA(long _faa) {
            object[] results = this.Invoke("getDadosFAA", new object[] {
                        _faa});
            return ((DadosFAA)(results[0]));
        }
        
        /// <remarks/>
        public void getDadosFAAAsync(long _faa) {
            this.getDadosFAAAsync(_faa, null);
        }
        
        /// <remarks/>
        public void getDadosFAAAsync(long _faa, object userState) {
            if ((this.getDadosFAAOperationCompleted == null)) {
                this.getDadosFAAOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDadosFAAOperationCompleted);
            }
            this.InvokeAsync("getDadosFAA", new object[] {
                        _faa}, this.getDadosFAAOperationCompleted, userState);
        }
        
        private void OngetDadosFAAOperationCompleted(object arg) {
            if ((this.getDadosFAACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDadosFAACompleted(this, new getDadosFAACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/getEspecbyCod", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getEspecbyCod(int _cod) {
            object[] results = this.Invoke("getEspecbyCod", new object[] {
                        _cod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getEspecbyCodAsync(int _cod) {
            this.getEspecbyCodAsync(_cod, null);
        }
        
        /// <remarks/>
        public void getEspecbyCodAsync(int _cod, object userState) {
            if ((this.getEspecbyCodOperationCompleted == null)) {
                this.getEspecbyCodOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEspecbyCodOperationCompleted);
            }
            this.InvokeAsync("getEspecbyCod", new object[] {
                        _cod}, this.getEspecbyCodOperationCompleted, userState);
        }
        
        private void OngetEspecbyCodOperationCompleted(object arg) {
            if ((this.getEspecbyCodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEspecbyCodCompleted(this, new getEspecbyCodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/getAllEspecs", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HospubDS.EspecialidadesDataTable getAllEspecs() {
            object[] results = this.Invoke("getAllEspecs", new object[0]);
            return ((HospubDS.EspecialidadesDataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllEspecsAsync() {
            this.getAllEspecsAsync(null);
        }
        
        /// <remarks/>
        public void getAllEspecsAsync(object userState) {
            if ((this.getAllEspecsOperationCompleted == null)) {
                this.getAllEspecsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllEspecsOperationCompleted);
            }
            this.InvokeAsync("getAllEspecs", new object[0], this.getAllEspecsOperationCompleted, userState);
        }
        
        private void OngetAllEspecsOperationCompleted(object arg) {
            if ((this.getAllEspecsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllEspecsCompleted(this, new getAllEspecsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/getAllProceds", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HospubDS.ProcedimentosDataTable getAllProceds() {
            object[] results = this.Invoke("getAllProceds", new object[0]);
            return ((HospubDS.ProcedimentosDataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllProcedsAsync() {
            this.getAllProcedsAsync(null);
        }
        
        /// <remarks/>
        public void getAllProcedsAsync(object userState) {
            if ((this.getAllProcedsOperationCompleted == null)) {
                this.getAllProcedsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProcedsOperationCompleted);
            }
            this.InvokeAsync("getAllProceds", new object[0], this.getAllProcedsOperationCompleted, userState);
        }
        
        private void OngetAllProcedsOperationCompleted(object arg) {
            if ((this.getAllProcedsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProcedsCompleted(this, new getAllProcedsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/getDescrProced", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDescrProced(long _codigo) {
            object[] results = this.Invoke("getDescrProced", new object[] {
                        _codigo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDescrProcedAsync(long _codigo) {
            this.getDescrProcedAsync(_codigo, null);
        }
        
        /// <remarks/>
        public void getDescrProcedAsync(long _codigo, object userState) {
            if ((this.getDescrProcedOperationCompleted == null)) {
                this.getDescrProcedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDescrProcedOperationCompleted);
            }
            this.InvokeAsync("getDescrProced", new object[] {
                        _codigo}, this.getDescrProcedOperationCompleted, userState);
        }
        
        private void OngetDescrProcedOperationCompleted(object arg) {
            if ((this.getDescrProcedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDescrProcedCompleted(this, new getDescrProcedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/gravaProcedEspec", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void gravaProcedEspec(long _cod, int _cod_espec) {
            this.Invoke("gravaProcedEspec", new object[] {
                        _cod,
                        _cod_espec});
        }
        
        /// <remarks/>
        public void gravaProcedEspecAsync(long _cod, int _cod_espec) {
            this.gravaProcedEspecAsync(_cod, _cod_espec, null);
        }
        
        /// <remarks/>
        public void gravaProcedEspecAsync(long _cod, int _cod_espec, object userState) {
            if ((this.gravaProcedEspecOperationCompleted == null)) {
                this.gravaProcedEspecOperationCompleted = new System.Threading.SendOrPostCallback(this.OngravaProcedEspecOperationCompleted);
            }
            this.InvokeAsync("gravaProcedEspec", new object[] {
                        _cod,
                        _cod_espec}, this.gravaProcedEspecOperationCompleted, userState);
        }
        
        private void OngravaProcedEspecOperationCompleted(object arg) {
            if ((this.gravaProcedEspecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.gravaProcedEspecCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/getProcedsEspecs", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SqlDS.EspecProcedDataTable getProcedsEspecs(int _cod_espec) {
            object[] results = this.Invoke("getProcedsEspecs", new object[] {
                        _cod_espec});
            return ((SqlDS.EspecProcedDataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getProcedsEspecsAsync(int _cod_espec) {
            this.getProcedsEspecsAsync(_cod_espec, null);
        }
        
        /// <remarks/>
        public void getProcedsEspecsAsync(int _cod_espec, object userState) {
            if ((this.getProcedsEspecsOperationCompleted == null)) {
                this.getProcedsEspecsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcedsEspecsOperationCompleted);
            }
            this.InvokeAsync("getProcedsEspecs", new object[] {
                        _cod_espec}, this.getProcedsEspecsOperationCompleted, userState);
        }
        
        private void OngetProcedsEspecsOperationCompleted(object arg) {
            if ((this.getProcedsEspecsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcedsEspecsCompleted(this, new getProcedsEspecsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/delProcedEspec", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void delProcedEspec(int _cod, int _espec) {
            this.Invoke("delProcedEspec", new object[] {
                        _cod,
                        _espec});
        }
        
        /// <remarks/>
        public void delProcedEspecAsync(int _cod, int _espec) {
            this.delProcedEspecAsync(_cod, _espec, null);
        }
        
        /// <remarks/>
        public void delProcedEspecAsync(int _cod, int _espec, object userState) {
            if ((this.delProcedEspecOperationCompleted == null)) {
                this.delProcedEspecOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelProcedEspecOperationCompleted);
            }
            this.InvokeAsync("delProcedEspec", new object[] {
                        _cod,
                        _espec}, this.delProcedEspecOperationCompleted, userState);
        }
        
        private void OndelProcedEspecOperationCompleted(object arg) {
            if ((this.delProcedEspecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delProcedEspecCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/getProcedsEspecsFAA", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SqlDS.Proceds_EspecsDataTable getProcedsEspecsFAA(int _cod_espec) {
            object[] results = this.Invoke("getProcedsEspecsFAA", new object[] {
                        _cod_espec});
            return ((SqlDS.Proceds_EspecsDataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getProcedsEspecsFAAAsync(int _cod_espec) {
            this.getProcedsEspecsFAAAsync(_cod_espec, null);
        }
        
        /// <remarks/>
        public void getProcedsEspecsFAAAsync(int _cod_espec, object userState) {
            if ((this.getProcedsEspecsFAAOperationCompleted == null)) {
                this.getProcedsEspecsFAAOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcedsEspecsFAAOperationCompleted);
            }
            this.InvokeAsync("getProcedsEspecsFAA", new object[] {
                        _cod_espec}, this.getProcedsEspecsFAAOperationCompleted, userState);
        }
        
        private void OngetProcedsEspecsFAAOperationCompleted(object arg) {
            if ((this.getProcedsEspecsFAACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcedsEspecsFAACompleted(this, new getProcedsEspecsFAACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/getAllProcedsEspecs", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SqlDS.ListaProcedsEspecsDataTable getAllProcedsEspecs() {
            object[] results = this.Invoke("getAllProcedsEspecs", new object[0]);
            return ((SqlDS.ListaProcedsEspecsDataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllProcedsEspecsAsync() {
            this.getAllProcedsEspecsAsync(null);
        }
        
        /// <remarks/>
        public void getAllProcedsEspecsAsync(object userState) {
            if ((this.getAllProcedsEspecsOperationCompleted == null)) {
                this.getAllProcedsEspecsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProcedsEspecsOperationCompleted);
            }
            this.InvokeAsync("getAllProcedsEspecs", new object[0], this.getAllProcedsEspecsOperationCompleted, userState);
        }
        
        private void OngetAllProcedsEspecsOperationCompleted(object arg) {
            if ((this.getAllProcedsEspecsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProcedsEspecsCompleted(this, new getAllProcedsEspecsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hspm.org/getClinbyEspec", RequestNamespace="http://hspm.org/", ResponseNamespace="http://hspm.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getClinbyEspec(int _espec) {
            object[] results = this.Invoke("getClinbyEspec", new object[] {
                        _espec});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getClinbyEspecAsync(int _espec) {
            this.getClinbyEspecAsync(_espec, null);
        }
        
        /// <remarks/>
        public void getClinbyEspecAsync(int _espec, object userState) {
            if ((this.getClinbyEspecOperationCompleted == null)) {
                this.getClinbyEspecOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetClinbyEspecOperationCompleted);
            }
            this.InvokeAsync("getClinbyEspec", new object[] {
                        _espec}, this.getClinbyEspecOperationCompleted, userState);
        }
        
        private void OngetClinbyEspecOperationCompleted(object arg) {
            if ((this.getClinbyEspecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getClinbyEspecCompleted(this, new getClinbyEspecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://hspm.org/")]
    public partial class DadosFAA {
        
        private SqlDS.Proceds_EspecsDataTable procedsField;
        
        private string clinicaField;
        
        private string cidField;
        
        private string rhField;
        
        private string nomeField;
        
        private string especialidadeField;
        
        private int codEspecField;
        
        private string dataField;
        
        private string profissionalField;
        
        private string sexoField;
        
        private string dtNascField;
        
        private string numFAAField;
        
        /// <remarks/>
        public SqlDS.Proceds_EspecsDataTable Proceds {
            get {
                return this.procedsField;
            }
            set {
                this.procedsField = value;
            }
        }
        
        /// <remarks/>
        public string Clinica {
            get {
                return this.clinicaField;
            }
            set {
                this.clinicaField = value;
            }
        }
        
        /// <remarks/>
        public string Cid {
            get {
                return this.cidField;
            }
            set {
                this.cidField = value;
            }
        }
        
        /// <remarks/>
        public string Rh {
            get {
                return this.rhField;
            }
            set {
                this.rhField = value;
            }
        }
        
        /// <remarks/>
        public string Nome {
            get {
                return this.nomeField;
            }
            set {
                this.nomeField = value;
            }
        }
        
        /// <remarks/>
        public string Especialidade {
            get {
                return this.especialidadeField;
            }
            set {
                this.especialidadeField = value;
            }
        }
        
        /// <remarks/>
        public int CodEspec {
            get {
                return this.codEspecField;
            }
            set {
                this.codEspecField = value;
            }
        }
        
        /// <remarks/>
        public string Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        public string Profissional {
            get {
                return this.profissionalField;
            }
            set {
                this.profissionalField = value;
            }
        }
        
        /// <remarks/>
        public string Sexo {
            get {
                return this.sexoField;
            }
            set {
                this.sexoField = value;
            }
        }
        
        /// <remarks/>
        public string DtNasc {
            get {
                return this.dtNascField;
            }
            set {
                this.dtNascField = value;
            }
        }
        
        /// <remarks/>
        public string NumFAA {
            get {
                return this.numFAAField;
            }
            set {
                this.numFAAField = value;
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SqlDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SqlDS : global::System.Data.DataSet {
        
        private Proceds_EspecsDataTable tableProceds_Especs;
        
        private EspecProcedDataTable tableEspecProced;
        
        private ListaProcedsEspecsDataTable tableListaProcedsEspecs;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SqlDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SqlDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Proceds_Especs"] != null)) {
                    base.Tables.Add(new Proceds_EspecsDataTable(ds.Tables["Proceds_Especs"]));
                }
                if ((ds.Tables["EspecProced"] != null)) {
                    base.Tables.Add(new EspecProcedDataTable(ds.Tables["EspecProced"]));
                }
                if ((ds.Tables["ListaProcedsEspecs"] != null)) {
                    base.Tables.Add(new ListaProcedsEspecsDataTable(ds.Tables["ListaProcedsEspecs"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Proceds_EspecsDataTable Proceds_Especs {
            get {
                return this.tableProceds_Especs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EspecProcedDataTable EspecProced {
            get {
                return this.tableEspecProced;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListaProcedsEspecsDataTable ListaProcedsEspecs {
            get {
                return this.tableListaProcedsEspecs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SqlDS cln = ((SqlDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Proceds_Especs"] != null)) {
                    base.Tables.Add(new Proceds_EspecsDataTable(ds.Tables["Proceds_Especs"]));
                }
                if ((ds.Tables["EspecProced"] != null)) {
                    base.Tables.Add(new EspecProcedDataTable(ds.Tables["EspecProced"]));
                }
                if ((ds.Tables["ListaProcedsEspecs"] != null)) {
                    base.Tables.Add(new ListaProcedsEspecsDataTable(ds.Tables["ListaProcedsEspecs"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProceds_Especs = ((Proceds_EspecsDataTable)(base.Tables["Proceds_Especs"]));
            if ((initTable == true)) {
                if ((this.tableProceds_Especs != null)) {
                    this.tableProceds_Especs.InitVars();
                }
            }
            this.tableEspecProced = ((EspecProcedDataTable)(base.Tables["EspecProced"]));
            if ((initTable == true)) {
                if ((this.tableEspecProced != null)) {
                    this.tableEspecProced.InitVars();
                }
            }
            this.tableListaProcedsEspecs = ((ListaProcedsEspecsDataTable)(base.Tables["ListaProcedsEspecs"]));
            if ((initTable == true)) {
                if ((this.tableListaProcedsEspecs != null)) {
                    this.tableListaProcedsEspecs.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SqlDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SqlDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProceds_Especs = new Proceds_EspecsDataTable();
            base.Tables.Add(this.tableProceds_Especs);
            this.tableEspecProced = new EspecProcedDataTable();
            base.Tables.Add(this.tableEspecProced);
            this.tableListaProcedsEspecs = new ListaProcedsEspecsDataTable();
            base.Tables.Add(this.tableListaProcedsEspecs);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProceds_Especs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEspecProced() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListaProcedsEspecs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SqlDS ds = new SqlDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Proceds_EspecsRowChangeEventHandler(object sender, Proceds_EspecsRowChangeEvent e);
        
        public delegate void EspecProcedRowChangeEventHandler(object sender, EspecProcedRowChangeEvent e);
        
        public delegate void ListaProcedsEspecsRowChangeEventHandler(object sender, ListaProcedsEspecsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Proceds_EspecsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncod_espec;
            
            private global::System.Data.DataColumn columndescr;
            
            private global::System.Data.DataColumn columncod_proced;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Proceds_EspecsDataTable() {
                this.TableName = "Proceds_Especs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Proceds_EspecsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Proceds_EspecsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cod_especColumn {
                get {
                    return this.columncod_espec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cod_procedColumn {
                get {
                    return this.columncod_proced;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Proceds_EspecsRow this[int index] {
                get {
                    return ((Proceds_EspecsRow)(this.Rows[index]));
                }
            }
            
            public event Proceds_EspecsRowChangeEventHandler Proceds_EspecsRowChanging;
            
            public event Proceds_EspecsRowChangeEventHandler Proceds_EspecsRowChanged;
            
            public event Proceds_EspecsRowChangeEventHandler Proceds_EspecsRowDeleting;
            
            public event Proceds_EspecsRowChangeEventHandler Proceds_EspecsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProceds_EspecsRow(Proceds_EspecsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Proceds_EspecsRow AddProceds_EspecsRow(int cod_espec, string descr, long cod_proced) {
                Proceds_EspecsRow rowProceds_EspecsRow = ((Proceds_EspecsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cod_espec,
                        descr,
                        cod_proced};
                rowProceds_EspecsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProceds_EspecsRow);
                return rowProceds_EspecsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Proceds_EspecsRow FindBycod_especcod_proced(int cod_espec, long cod_proced) {
                return ((Proceds_EspecsRow)(this.Rows.Find(new object[] {
                            cod_espec,
                            cod_proced})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Proceds_EspecsDataTable cln = ((Proceds_EspecsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Proceds_EspecsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncod_espec = base.Columns["cod_espec"];
                this.columndescr = base.Columns["descr"];
                this.columncod_proced = base.Columns["cod_proced"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncod_espec = new global::System.Data.DataColumn("cod_espec", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncod_espec);
                this.columndescr = new global::System.Data.DataColumn("descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescr);
                this.columncod_proced = new global::System.Data.DataColumn("cod_proced", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncod_proced);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncod_espec,
                                this.columncod_proced}, true));
                this.columncod_espec.AllowDBNull = false;
                this.columndescr.AllowDBNull = false;
                this.columndescr.MaxLength = 80;
                this.columncod_proced.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Proceds_EspecsRow NewProceds_EspecsRow() {
                return ((Proceds_EspecsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Proceds_EspecsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Proceds_EspecsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Proceds_EspecsRowChanged != null)) {
                    this.Proceds_EspecsRowChanged(this, new Proceds_EspecsRowChangeEvent(((Proceds_EspecsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Proceds_EspecsRowChanging != null)) {
                    this.Proceds_EspecsRowChanging(this, new Proceds_EspecsRowChangeEvent(((Proceds_EspecsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Proceds_EspecsRowDeleted != null)) {
                    this.Proceds_EspecsRowDeleted(this, new Proceds_EspecsRowChangeEvent(((Proceds_EspecsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Proceds_EspecsRowDeleting != null)) {
                    this.Proceds_EspecsRowDeleting(this, new Proceds_EspecsRowChangeEvent(((Proceds_EspecsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProceds_EspecsRow(Proceds_EspecsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SqlDS ds = new SqlDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Proceds_EspecsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EspecProcedDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncod;
            
            private global::System.Data.DataColumn columnDescr;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecProcedDataTable() {
                this.TableName = "EspecProced";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EspecProcedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EspecProcedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codColumn {
                get {
                    return this.columncod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescrColumn {
                get {
                    return this.columnDescr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecProcedRow this[int index] {
                get {
                    return ((EspecProcedRow)(this.Rows[index]));
                }
            }
            
            public event EspecProcedRowChangeEventHandler EspecProcedRowChanging;
            
            public event EspecProcedRowChangeEventHandler EspecProcedRowChanged;
            
            public event EspecProcedRowChangeEventHandler EspecProcedRowDeleting;
            
            public event EspecProcedRowChangeEventHandler EspecProcedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEspecProcedRow(EspecProcedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecProcedRow AddEspecProcedRow(long cod, string Descr) {
                EspecProcedRow rowEspecProcedRow = ((EspecProcedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cod,
                        Descr};
                rowEspecProcedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEspecProcedRow);
                return rowEspecProcedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EspecProcedDataTable cln = ((EspecProcedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EspecProcedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncod = base.Columns["cod"];
                this.columnDescr = base.Columns["Descr"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncod = new global::System.Data.DataColumn("cod", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncod);
                this.columnDescr = new global::System.Data.DataColumn("Descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescr);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecProcedRow NewEspecProcedRow() {
                return ((EspecProcedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EspecProcedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EspecProcedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EspecProcedRowChanged != null)) {
                    this.EspecProcedRowChanged(this, new EspecProcedRowChangeEvent(((EspecProcedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EspecProcedRowChanging != null)) {
                    this.EspecProcedRowChanging(this, new EspecProcedRowChangeEvent(((EspecProcedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EspecProcedRowDeleted != null)) {
                    this.EspecProcedRowDeleted(this, new EspecProcedRowChangeEvent(((EspecProcedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EspecProcedRowDeleting != null)) {
                    this.EspecProcedRowDeleting(this, new EspecProcedRowChangeEvent(((EspecProcedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEspecProcedRow(EspecProcedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SqlDS ds = new SqlDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EspecProcedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListaProcedsEspecsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCod_Espec;
            
            private global::System.Data.DataColumn columnEspecialidade;
            
            private global::System.Data.DataColumn columnCod_Proced;
            
            private global::System.Data.DataColumn columnProcedimento;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaProcedsEspecsDataTable() {
                this.TableName = "ListaProcedsEspecs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListaProcedsEspecsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListaProcedsEspecsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Cod_EspecColumn {
                get {
                    return this.columnCod_Espec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EspecialidadeColumn {
                get {
                    return this.columnEspecialidade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Cod_ProcedColumn {
                get {
                    return this.columnCod_Proced;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcedimentoColumn {
                get {
                    return this.columnProcedimento;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaProcedsEspecsRow this[int index] {
                get {
                    return ((ListaProcedsEspecsRow)(this.Rows[index]));
                }
            }
            
            public event ListaProcedsEspecsRowChangeEventHandler ListaProcedsEspecsRowChanging;
            
            public event ListaProcedsEspecsRowChangeEventHandler ListaProcedsEspecsRowChanged;
            
            public event ListaProcedsEspecsRowChangeEventHandler ListaProcedsEspecsRowDeleting;
            
            public event ListaProcedsEspecsRowChangeEventHandler ListaProcedsEspecsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListaProcedsEspecsRow(ListaProcedsEspecsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaProcedsEspecsRow AddListaProcedsEspecsRow(int Cod_Espec, string Especialidade, long Cod_Proced, string Procedimento) {
                ListaProcedsEspecsRow rowListaProcedsEspecsRow = ((ListaProcedsEspecsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Cod_Espec,
                        Especialidade,
                        Cod_Proced,
                        Procedimento};
                rowListaProcedsEspecsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListaProcedsEspecsRow);
                return rowListaProcedsEspecsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListaProcedsEspecsDataTable cln = ((ListaProcedsEspecsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListaProcedsEspecsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCod_Espec = base.Columns["Cod_Espec"];
                this.columnEspecialidade = base.Columns["Especialidade"];
                this.columnCod_Proced = base.Columns["Cod_Proced"];
                this.columnProcedimento = base.Columns["Procedimento"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCod_Espec = new global::System.Data.DataColumn("Cod_Espec", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCod_Espec);
                this.columnEspecialidade = new global::System.Data.DataColumn("Especialidade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEspecialidade);
                this.columnCod_Proced = new global::System.Data.DataColumn("Cod_Proced", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCod_Proced);
                this.columnProcedimento = new global::System.Data.DataColumn("Procedimento", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcedimento);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaProcedsEspecsRow NewListaProcedsEspecsRow() {
                return ((ListaProcedsEspecsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListaProcedsEspecsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListaProcedsEspecsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListaProcedsEspecsRowChanged != null)) {
                    this.ListaProcedsEspecsRowChanged(this, new ListaProcedsEspecsRowChangeEvent(((ListaProcedsEspecsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListaProcedsEspecsRowChanging != null)) {
                    this.ListaProcedsEspecsRowChanging(this, new ListaProcedsEspecsRowChangeEvent(((ListaProcedsEspecsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListaProcedsEspecsRowDeleted != null)) {
                    this.ListaProcedsEspecsRowDeleted(this, new ListaProcedsEspecsRowChangeEvent(((ListaProcedsEspecsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListaProcedsEspecsRowDeleting != null)) {
                    this.ListaProcedsEspecsRowDeleting(this, new ListaProcedsEspecsRowChangeEvent(((ListaProcedsEspecsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListaProcedsEspecsRow(ListaProcedsEspecsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SqlDS ds = new SqlDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListaProcedsEspecsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Proceds_EspecsRow : global::System.Data.DataRow {
            
            private Proceds_EspecsDataTable tableProceds_Especs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Proceds_EspecsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProceds_Especs = ((Proceds_EspecsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cod_espec {
                get {
                    return ((int)(this[this.tableProceds_Especs.cod_especColumn]));
                }
                set {
                    this[this.tableProceds_Especs.cod_especColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descr {
                get {
                    return ((string)(this[this.tableProceds_Especs.descrColumn]));
                }
                set {
                    this[this.tableProceds_Especs.descrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long cod_proced {
                get {
                    return ((long)(this[this.tableProceds_Especs.cod_procedColumn]));
                }
                set {
                    this[this.tableProceds_Especs.cod_procedColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EspecProcedRow : global::System.Data.DataRow {
            
            private EspecProcedDataTable tableEspecProced;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EspecProcedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEspecProced = ((EspecProcedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long cod {
                get {
                    try {
                        return ((long)(this[this.tableEspecProced.codColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cod\' in table \'EspecProced\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEspecProced.codColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descr {
                get {
                    try {
                        return ((string)(this[this.tableEspecProced.DescrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Descr\' in table \'EspecProced\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEspecProced.DescrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscodNull() {
                return this.IsNull(this.tableEspecProced.codColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcodNull() {
                this[this.tableEspecProced.codColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescrNull() {
                return this.IsNull(this.tableEspecProced.DescrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescrNull() {
                this[this.tableEspecProced.DescrColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListaProcedsEspecsRow : global::System.Data.DataRow {
            
            private ListaProcedsEspecsDataTable tableListaProcedsEspecs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListaProcedsEspecsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListaProcedsEspecs = ((ListaProcedsEspecsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cod_Espec {
                get {
                    try {
                        return ((int)(this[this.tableListaProcedsEspecs.Cod_EspecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cod_Espec\' in table \'ListaProcedsEspecs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaProcedsEspecs.Cod_EspecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Especialidade {
                get {
                    try {
                        return ((string)(this[this.tableListaProcedsEspecs.EspecialidadeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Especialidade\' in table \'ListaProcedsEspecs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaProcedsEspecs.EspecialidadeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Cod_Proced {
                get {
                    try {
                        return ((long)(this[this.tableListaProcedsEspecs.Cod_ProcedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cod_Proced\' in table \'ListaProcedsEspecs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaProcedsEspecs.Cod_ProcedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Procedimento {
                get {
                    try {
                        return ((string)(this[this.tableListaProcedsEspecs.ProcedimentoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Procedimento\' in table \'ListaProcedsEspecs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListaProcedsEspecs.ProcedimentoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCod_EspecNull() {
                return this.IsNull(this.tableListaProcedsEspecs.Cod_EspecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCod_EspecNull() {
                this[this.tableListaProcedsEspecs.Cod_EspecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEspecialidadeNull() {
                return this.IsNull(this.tableListaProcedsEspecs.EspecialidadeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEspecialidadeNull() {
                this[this.tableListaProcedsEspecs.EspecialidadeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCod_ProcedNull() {
                return this.IsNull(this.tableListaProcedsEspecs.Cod_ProcedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCod_ProcedNull() {
                this[this.tableListaProcedsEspecs.Cod_ProcedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcedimentoNull() {
                return this.IsNull(this.tableListaProcedsEspecs.ProcedimentoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcedimentoNull() {
                this[this.tableListaProcedsEspecs.ProcedimentoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Proceds_EspecsRowChangeEvent : global::System.EventArgs {
            
            private Proceds_EspecsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Proceds_EspecsRowChangeEvent(Proceds_EspecsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Proceds_EspecsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EspecProcedRowChangeEvent : global::System.EventArgs {
            
            private EspecProcedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecProcedRowChangeEvent(EspecProcedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecProcedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListaProcedsEspecsRowChangeEvent : global::System.EventArgs {
            
            private ListaProcedsEspecsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaProcedsEspecsRowChangeEvent(ListaProcedsEspecsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListaProcedsEspecsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("HospubDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class HospubDS : global::System.Data.DataSet {
        
        private EspecsHospubDataTable tableEspecsHospub;
        
        private procsHospubDataTable tableprocsHospub;
        
        private EspecialidadesDataTable tableEspecialidades;
        
        private ProcedimentosDataTable tableProcedimentos;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HospubDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected HospubDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EspecsHospub"] != null)) {
                    base.Tables.Add(new EspecsHospubDataTable(ds.Tables["EspecsHospub"]));
                }
                if ((ds.Tables["procsHospub"] != null)) {
                    base.Tables.Add(new procsHospubDataTable(ds.Tables["procsHospub"]));
                }
                if ((ds.Tables["Especialidades"] != null)) {
                    base.Tables.Add(new EspecialidadesDataTable(ds.Tables["Especialidades"]));
                }
                if ((ds.Tables["Procedimentos"] != null)) {
                    base.Tables.Add(new ProcedimentosDataTable(ds.Tables["Procedimentos"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EspecsHospubDataTable EspecsHospub {
            get {
                return this.tableEspecsHospub;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public procsHospubDataTable procsHospub {
            get {
                return this.tableprocsHospub;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EspecialidadesDataTable Especialidades {
            get {
                return this.tableEspecialidades;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProcedimentosDataTable Procedimentos {
            get {
                return this.tableProcedimentos;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            HospubDS cln = ((HospubDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EspecsHospub"] != null)) {
                    base.Tables.Add(new EspecsHospubDataTable(ds.Tables["EspecsHospub"]));
                }
                if ((ds.Tables["procsHospub"] != null)) {
                    base.Tables.Add(new procsHospubDataTable(ds.Tables["procsHospub"]));
                }
                if ((ds.Tables["Especialidades"] != null)) {
                    base.Tables.Add(new EspecialidadesDataTable(ds.Tables["Especialidades"]));
                }
                if ((ds.Tables["Procedimentos"] != null)) {
                    base.Tables.Add(new ProcedimentosDataTable(ds.Tables["Procedimentos"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEspecsHospub = ((EspecsHospubDataTable)(base.Tables["EspecsHospub"]));
            if ((initTable == true)) {
                if ((this.tableEspecsHospub != null)) {
                    this.tableEspecsHospub.InitVars();
                }
            }
            this.tableprocsHospub = ((procsHospubDataTable)(base.Tables["procsHospub"]));
            if ((initTable == true)) {
                if ((this.tableprocsHospub != null)) {
                    this.tableprocsHospub.InitVars();
                }
            }
            this.tableEspecialidades = ((EspecialidadesDataTable)(base.Tables["Especialidades"]));
            if ((initTable == true)) {
                if ((this.tableEspecialidades != null)) {
                    this.tableEspecialidades.InitVars();
                }
            }
            this.tableProcedimentos = ((ProcedimentosDataTable)(base.Tables["Procedimentos"]));
            if ((initTable == true)) {
                if ((this.tableProcedimentos != null)) {
                    this.tableProcedimentos.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "HospubDS";
            this.Prefix = "";
            this.Namespace = "http://hspm.org/HospubDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEspecsHospub = new EspecsHospubDataTable();
            base.Tables.Add(this.tableEspecsHospub);
            this.tableprocsHospub = new procsHospubDataTable();
            base.Tables.Add(this.tableprocsHospub);
            this.tableEspecialidades = new EspecialidadesDataTable();
            base.Tables.Add(this.tableEspecialidades);
            this.tableProcedimentos = new ProcedimentosDataTable();
            base.Tables.Add(this.tableProcedimentos);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEspecsHospub() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprocsHospub() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEspecialidades() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProcedimentos() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            HospubDS ds = new HospubDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EspecsHospubRowChangeEventHandler(object sender, EspecsHospubRowChangeEvent e);
        
        public delegate void procsHospubRowChangeEventHandler(object sender, procsHospubRowChangeEvent e);
        
        public delegate void EspecialidadesRowChangeEventHandler(object sender, EspecialidadesRowChangeEvent e);
        
        public delegate void ProcedimentosRowChangeEventHandler(object sender, ProcedimentosRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EspecsHospubDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnia9codprin;
            
            private global::System.Data.DataColumn columnia9codsub;
            
            private global::System.Data.DataColumn columnia9descr;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecsHospubDataTable() {
                this.TableName = "EspecsHospub";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EspecsHospubDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EspecsHospubDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ia9codprinColumn {
                get {
                    return this.columnia9codprin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ia9codsubColumn {
                get {
                    return this.columnia9codsub;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ia9descrColumn {
                get {
                    return this.columnia9descr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecsHospubRow this[int index] {
                get {
                    return ((EspecsHospubRow)(this.Rows[index]));
                }
            }
            
            public event EspecsHospubRowChangeEventHandler EspecsHospubRowChanging;
            
            public event EspecsHospubRowChangeEventHandler EspecsHospubRowChanged;
            
            public event EspecsHospubRowChangeEventHandler EspecsHospubRowDeleting;
            
            public event EspecsHospubRowChangeEventHandler EspecsHospubRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEspecsHospubRow(EspecsHospubRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecsHospubRow AddEspecsHospubRow(string ia9codprin, string ia9codsub, string ia9descr) {
                EspecsHospubRow rowEspecsHospubRow = ((EspecsHospubRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ia9codprin,
                        ia9codsub,
                        ia9descr};
                rowEspecsHospubRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEspecsHospubRow);
                return rowEspecsHospubRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecsHospubRow FindByia9codprinia9codsub(string ia9codprin, string ia9codsub) {
                return ((EspecsHospubRow)(this.Rows.Find(new object[] {
                            ia9codprin,
                            ia9codsub})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EspecsHospubDataTable cln = ((EspecsHospubDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EspecsHospubDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnia9codprin = base.Columns["ia9codprin"];
                this.columnia9codsub = base.Columns["ia9codsub"];
                this.columnia9descr = base.Columns["ia9descr"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnia9codprin = new global::System.Data.DataColumn("ia9codprin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnia9codprin);
                this.columnia9codsub = new global::System.Data.DataColumn("ia9codsub", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnia9codsub);
                this.columnia9descr = new global::System.Data.DataColumn("ia9descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnia9descr);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnia9codprin,
                                this.columnia9codsub}, true));
                this.columnia9codprin.AllowDBNull = false;
                this.columnia9codprin.MaxLength = 4;
                this.columnia9codsub.AllowDBNull = false;
                this.columnia9codsub.MaxLength = 2;
                this.columnia9descr.AllowDBNull = false;
                this.columnia9descr.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecsHospubRow NewEspecsHospubRow() {
                return ((EspecsHospubRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EspecsHospubRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EspecsHospubRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EspecsHospubRowChanged != null)) {
                    this.EspecsHospubRowChanged(this, new EspecsHospubRowChangeEvent(((EspecsHospubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EspecsHospubRowChanging != null)) {
                    this.EspecsHospubRowChanging(this, new EspecsHospubRowChangeEvent(((EspecsHospubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EspecsHospubRowDeleted != null)) {
                    this.EspecsHospubRowDeleted(this, new EspecsHospubRowChangeEvent(((EspecsHospubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EspecsHospubRowDeleting != null)) {
                    this.EspecsHospubRowDeleting(this, new EspecsHospubRowChangeEvent(((EspecsHospubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEspecsHospubRow(EspecsHospubRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HospubDS ds = new HospubDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EspecsHospubDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class procsHospubDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnib8descr;
            
            private global::System.Data.DataColumn columnib8grusubniv;
            
            private global::System.Data.DataColumn columnib8compl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public procsHospubDataTable() {
                this.TableName = "procsHospub";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal procsHospubDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected procsHospubDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ib8descrColumn {
                get {
                    return this.columnib8descr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ib8grusubnivColumn {
                get {
                    return this.columnib8grusubniv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ib8complColumn {
                get {
                    return this.columnib8compl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public procsHospubRow this[int index] {
                get {
                    return ((procsHospubRow)(this.Rows[index]));
                }
            }
            
            public event procsHospubRowChangeEventHandler procsHospubRowChanging;
            
            public event procsHospubRowChangeEventHandler procsHospubRowChanged;
            
            public event procsHospubRowChangeEventHandler procsHospubRowDeleting;
            
            public event procsHospubRowChangeEventHandler procsHospubRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprocsHospubRow(procsHospubRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public procsHospubRow AddprocsHospubRow(string ib8descr, decimal ib8grusubniv, decimal ib8compl) {
                procsHospubRow rowprocsHospubRow = ((procsHospubRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ib8descr,
                        ib8grusubniv,
                        ib8compl};
                rowprocsHospubRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprocsHospubRow);
                return rowprocsHospubRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public procsHospubRow FindByib8grusubnivib8compl(decimal ib8grusubniv, decimal ib8compl) {
                return ((procsHospubRow)(this.Rows.Find(new object[] {
                            ib8grusubniv,
                            ib8compl})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                procsHospubDataTable cln = ((procsHospubDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new procsHospubDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnib8descr = base.Columns["ib8descr"];
                this.columnib8grusubniv = base.Columns["ib8grusubniv"];
                this.columnib8compl = base.Columns["ib8compl"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnib8descr = new global::System.Data.DataColumn("ib8descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnib8descr);
                this.columnib8grusubniv = new global::System.Data.DataColumn("ib8grusubniv", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnib8grusubniv);
                this.columnib8compl = new global::System.Data.DataColumn("ib8compl", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnib8compl);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnib8grusubniv,
                                this.columnib8compl}, true));
                this.columnib8descr.AllowDBNull = false;
                this.columnib8descr.MaxLength = 100;
                this.columnib8grusubniv.AllowDBNull = false;
                this.columnib8compl.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public procsHospubRow NewprocsHospubRow() {
                return ((procsHospubRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new procsHospubRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(procsHospubRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.procsHospubRowChanged != null)) {
                    this.procsHospubRowChanged(this, new procsHospubRowChangeEvent(((procsHospubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.procsHospubRowChanging != null)) {
                    this.procsHospubRowChanging(this, new procsHospubRowChangeEvent(((procsHospubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.procsHospubRowDeleted != null)) {
                    this.procsHospubRowDeleted(this, new procsHospubRowChangeEvent(((procsHospubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.procsHospubRowDeleting != null)) {
                    this.procsHospubRowDeleting(this, new procsHospubRowChangeEvent(((procsHospubRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprocsHospubRow(procsHospubRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HospubDS ds = new HospubDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "procsHospubDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EspecialidadesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCodigo;
            
            private global::System.Data.DataColumn columnNome;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecialidadesDataTable() {
                this.TableName = "Especialidades";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EspecialidadesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EspecialidadesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodigoColumn {
                get {
                    return this.columnCodigo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NomeColumn {
                get {
                    return this.columnNome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecialidadesRow this[int index] {
                get {
                    return ((EspecialidadesRow)(this.Rows[index]));
                }
            }
            
            public event EspecialidadesRowChangeEventHandler EspecialidadesRowChanging;
            
            public event EspecialidadesRowChangeEventHandler EspecialidadesRowChanged;
            
            public event EspecialidadesRowChangeEventHandler EspecialidadesRowDeleting;
            
            public event EspecialidadesRowChangeEventHandler EspecialidadesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEspecialidadesRow(EspecialidadesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecialidadesRow AddEspecialidadesRow(int Codigo, string Nome) {
                EspecialidadesRow rowEspecialidadesRow = ((EspecialidadesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Codigo,
                        Nome};
                rowEspecialidadesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEspecialidadesRow);
                return rowEspecialidadesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecialidadesRow FindByCodigo(int Codigo) {
                return ((EspecialidadesRow)(this.Rows.Find(new object[] {
                            Codigo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EspecialidadesDataTable cln = ((EspecialidadesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EspecialidadesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCodigo = base.Columns["Codigo"];
                this.columnNome = base.Columns["Nome"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCodigo = new global::System.Data.DataColumn("Codigo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodigo);
                this.columnNome = new global::System.Data.DataColumn("Nome", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNome);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCodigo}, true));
                this.columnCodigo.AllowDBNull = false;
                this.columnCodigo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecialidadesRow NewEspecialidadesRow() {
                return ((EspecialidadesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EspecialidadesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EspecialidadesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EspecialidadesRowChanged != null)) {
                    this.EspecialidadesRowChanged(this, new EspecialidadesRowChangeEvent(((EspecialidadesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EspecialidadesRowChanging != null)) {
                    this.EspecialidadesRowChanging(this, new EspecialidadesRowChangeEvent(((EspecialidadesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EspecialidadesRowDeleted != null)) {
                    this.EspecialidadesRowDeleted(this, new EspecialidadesRowChangeEvent(((EspecialidadesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EspecialidadesRowDeleting != null)) {
                    this.EspecialidadesRowDeleting(this, new EspecialidadesRowChangeEvent(((EspecialidadesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEspecialidadesRow(EspecialidadesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HospubDS ds = new HospubDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EspecialidadesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProcedimentosDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCodigo;
            
            private global::System.Data.DataColumn columnDescricao;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcedimentosDataTable() {
                this.TableName = "Procedimentos";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcedimentosDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProcedimentosDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodigoColumn {
                get {
                    return this.columnCodigo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescricaoColumn {
                get {
                    return this.columnDescricao;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcedimentosRow this[int index] {
                get {
                    return ((ProcedimentosRow)(this.Rows[index]));
                }
            }
            
            public event ProcedimentosRowChangeEventHandler ProcedimentosRowChanging;
            
            public event ProcedimentosRowChangeEventHandler ProcedimentosRowChanged;
            
            public event ProcedimentosRowChangeEventHandler ProcedimentosRowDeleting;
            
            public event ProcedimentosRowChangeEventHandler ProcedimentosRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProcedimentosRow(ProcedimentosRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcedimentosRow AddProcedimentosRow(int Codigo, string Descricao) {
                ProcedimentosRow rowProcedimentosRow = ((ProcedimentosRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Codigo,
                        Descricao};
                rowProcedimentosRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProcedimentosRow);
                return rowProcedimentosRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcedimentosRow FindByCodigo(int Codigo) {
                return ((ProcedimentosRow)(this.Rows.Find(new object[] {
                            Codigo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProcedimentosDataTable cln = ((ProcedimentosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProcedimentosDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCodigo = base.Columns["Codigo"];
                this.columnDescricao = base.Columns["Descricao"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCodigo = new global::System.Data.DataColumn("Codigo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodigo);
                this.columnDescricao = new global::System.Data.DataColumn("Descricao", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescricao);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCodigo}, true));
                this.columnCodigo.AllowDBNull = false;
                this.columnCodigo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcedimentosRow NewProcedimentosRow() {
                return ((ProcedimentosRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProcedimentosRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProcedimentosRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProcedimentosRowChanged != null)) {
                    this.ProcedimentosRowChanged(this, new ProcedimentosRowChangeEvent(((ProcedimentosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProcedimentosRowChanging != null)) {
                    this.ProcedimentosRowChanging(this, new ProcedimentosRowChangeEvent(((ProcedimentosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProcedimentosRowDeleted != null)) {
                    this.ProcedimentosRowDeleted(this, new ProcedimentosRowChangeEvent(((ProcedimentosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProcedimentosRowDeleting != null)) {
                    this.ProcedimentosRowDeleting(this, new ProcedimentosRowChangeEvent(((ProcedimentosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProcedimentosRow(ProcedimentosRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HospubDS ds = new HospubDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProcedimentosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EspecsHospubRow : global::System.Data.DataRow {
            
            private EspecsHospubDataTable tableEspecsHospub;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EspecsHospubRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEspecsHospub = ((EspecsHospubDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ia9codprin {
                get {
                    return ((string)(this[this.tableEspecsHospub.ia9codprinColumn]));
                }
                set {
                    this[this.tableEspecsHospub.ia9codprinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ia9codsub {
                get {
                    return ((string)(this[this.tableEspecsHospub.ia9codsubColumn]));
                }
                set {
                    this[this.tableEspecsHospub.ia9codsubColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ia9descr {
                get {
                    return ((string)(this[this.tableEspecsHospub.ia9descrColumn]));
                }
                set {
                    this[this.tableEspecsHospub.ia9descrColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class procsHospubRow : global::System.Data.DataRow {
            
            private procsHospubDataTable tableprocsHospub;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal procsHospubRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprocsHospub = ((procsHospubDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ib8descr {
                get {
                    return ((string)(this[this.tableprocsHospub.ib8descrColumn]));
                }
                set {
                    this[this.tableprocsHospub.ib8descrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ib8grusubniv {
                get {
                    return ((decimal)(this[this.tableprocsHospub.ib8grusubnivColumn]));
                }
                set {
                    this[this.tableprocsHospub.ib8grusubnivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ib8compl {
                get {
                    return ((decimal)(this[this.tableprocsHospub.ib8complColumn]));
                }
                set {
                    this[this.tableprocsHospub.ib8complColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EspecialidadesRow : global::System.Data.DataRow {
            
            private EspecialidadesDataTable tableEspecialidades;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EspecialidadesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEspecialidades = ((EspecialidadesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Codigo {
                get {
                    return ((int)(this[this.tableEspecialidades.CodigoColumn]));
                }
                set {
                    this[this.tableEspecialidades.CodigoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nome {
                get {
                    try {
                        return ((string)(this[this.tableEspecialidades.NomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Nome\' in table \'Especialidades\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEspecialidades.NomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNomeNull() {
                return this.IsNull(this.tableEspecialidades.NomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNomeNull() {
                this[this.tableEspecialidades.NomeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProcedimentosRow : global::System.Data.DataRow {
            
            private ProcedimentosDataTable tableProcedimentos;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcedimentosRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProcedimentos = ((ProcedimentosDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Codigo {
                get {
                    return ((int)(this[this.tableProcedimentos.CodigoColumn]));
                }
                set {
                    this[this.tableProcedimentos.CodigoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descricao {
                get {
                    try {
                        return ((string)(this[this.tableProcedimentos.DescricaoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Descricao\' in table \'Procedimentos\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcedimentos.DescricaoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescricaoNull() {
                return this.IsNull(this.tableProcedimentos.DescricaoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescricaoNull() {
                this[this.tableProcedimentos.DescricaoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EspecsHospubRowChangeEvent : global::System.EventArgs {
            
            private EspecsHospubRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecsHospubRowChangeEvent(EspecsHospubRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecsHospubRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class procsHospubRowChangeEvent : global::System.EventArgs {
            
            private procsHospubRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public procsHospubRowChangeEvent(procsHospubRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public procsHospubRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EspecialidadesRowChangeEvent : global::System.EventArgs {
            
            private EspecialidadesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecialidadesRowChangeEvent(EspecialidadesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecialidadesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProcedimentosRowChangeEvent : global::System.EventArgs {
            
            private ProcedimentosRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcedimentosRowChangeEvent(ProcedimentosRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcedimentosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getDadosFAACompletedEventHandler(object sender, getDadosFAACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDadosFAACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDadosFAACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DadosFAA Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DadosFAA)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getEspecbyCodCompletedEventHandler(object sender, getEspecbyCodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEspecbyCodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEspecbyCodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getAllEspecsCompletedEventHandler(object sender, getAllEspecsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllEspecsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllEspecsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HospubDS.EspecialidadesDataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HospubDS.EspecialidadesDataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getAllProcedsCompletedEventHandler(object sender, getAllProcedsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProcedsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProcedsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HospubDS.ProcedimentosDataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HospubDS.ProcedimentosDataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getDescrProcedCompletedEventHandler(object sender, getDescrProcedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDescrProcedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDescrProcedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void gravaProcedEspecCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getProcedsEspecsCompletedEventHandler(object sender, getProcedsEspecsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcedsEspecsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcedsEspecsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SqlDS.EspecProcedDataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SqlDS.EspecProcedDataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void delProcedEspecCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getProcedsEspecsFAACompletedEventHandler(object sender, getProcedsEspecsFAACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcedsEspecsFAACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcedsEspecsFAACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SqlDS.Proceds_EspecsDataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SqlDS.Proceds_EspecsDataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getAllProcedsEspecsCompletedEventHandler(object sender, getAllProcedsEspecsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProcedsEspecsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProcedsEspecsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SqlDS.ListaProcedsEspecsDataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SqlDS.ListaProcedsEspecsDataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getClinbyEspecCompletedEventHandler(object sender, getClinbyEspecCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getClinbyEspecCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getClinbyEspecCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591